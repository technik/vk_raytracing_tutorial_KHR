#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable


#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = B_CAMERA) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
}
cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float skyIntensity;
  float sunIntensity;
  int   frame;
  int   maxBounces;
  int   firstBounce;
  int   renderFlags;
}
pushC;

float D_GGX(float ndh, float a) {
    float k = a / max(1e-4, (ndh * ndh)*(a*a-1) + 1);
    return k * k / M_PI;
}

// Earl Hammon's Diffuse GGX talk
// Predivided by 4*ndl*ndv
float SmithGGX_G2Approx(float ndv, float ndl, float a)
{
    return 0.5 / mix(2*ndl*ndv, ndl+ndv, a);
}

vec3 F_Schlick(float hdl, vec3 f0) {
    float p = (1-hdl);
    float p2 = p*p;
    return f0 + (1.0 - f0) * p*p2*p2;
}

void main()
{
  // Initialize the random number
  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  vec3 lightModulation = vec3(1);
  vec3 rayAccumLight = vec3(0);

  for(int rayDepth = 0; rayDepth <= pushC.maxBounces; rayDepth++)
  //for(int rayDepth = 0; rayDepth < 1; rayDepth++)
  {
    traceRayEXT(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                origin.xyz,            // ray origin
                tMin,              // ray min range
                direction.xyz,         // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
    );

    if(rayDepth >= pushC.firstBounce ||
      (rayDepth == 0 && prd.world_position.w < 0)) // Always show the background
    {
      rayAccumLight += lightModulation * prd.emittance;
    }
    if(prd.world_position.w < 0) // miss
    {
      break;
    }

    // new ray config for next frame
    vec3 hitNormal = prd.world_normal;
    origin.xyz = prd.world_position.xyz + hitNormal*1e-4*prd.world_position.w;
    vec3 L;
    const float alpha = prd.roughness * prd.roughness;

    // Reconstruct PBR material
    vec3 specularColor = mix(vec3(0.04), prd.baseColor.xyz, prd.metallic);
    vec3 diffuseColor = prd.baseColor.xyz * (1.0-prd.metallic);

    // 50% probability for each path
    vec3 brdf = vec3(1.0);
    vec3 tangent, bitangent;
    createCoordinateSystem(hitNormal, tangent, bitangent);
    if((seed & 1) > 0) // Diffuse
    {
      	if(rayDepth == 0 && (pushC.renderFlags & FLAG_SPECULAR_ONLY) > 0)
       		break; // Ignore diffuse path

		L = samplingCosHemisphere(seed, tangent, bitangent, hitNormal);
		const float ndl = max(0.0, dot(L, hitNormal));
		// 2 factor to compensate for 50% probability of hitting this light path
		brdf = 2.0 * diffuseColor / M_PI;
    }
    else // Specular
    {
        if(rayDepth == 0 && (pushC.renderFlags & FLAG_DIFFUSE_ONLY) > 0)
            break; // Ignore specular path

        // Scatter ray direction
        const vec3 tsH = samplingGGXHemisphere(seed, alpha);
        const vec3 H = tangent*tsH.x + bitangent*tsH.y + hitNormal*tsH.z;
        L = reflect(direction.xyz, H);

        float ndl = dot(L, hitNormal);
        if(ndl > 0)
        {
            ndl = max(1e-4, ndl);
            const float ndh = max(1e-3, tsH.z);
            const float vdh = max(0.0, -dot(H, direction.xyz));
            const float ndv = max(1e-4, -dot(hitNormal, direction.xyz));
            
            float G = SmithGGX_G2Approx(ndv, ndl, alpha);
            float s = min(1.0, G*ndl/ndh);
            vec3 F = F_Schlick(vdh, specularColor);
            vec3 Fr = s*F;

            // 2 factor to compensate for 50% probability of hitting this light path
            brdf = 2*Fr;
        }
        else
        {
            rayDepth = pushC.maxBounces+1; // Should really do multiple scattering here.
        }      
    }

    // Explicitly sample sun light
    float ndl = dot(pushC.lightPosition, hitNormal);
    if(ndl > 0)
    {
      traceRayEXT(topLevelAS,        // acceleration structure
              rayFlags,          // rayFlags
              0xFF,              // cullMask
              0,                 // sbtRecordOffset
              0,                 // sbtRecordStride
              0,                 // missIndex
              origin.xyz,            // ray origin
              tMin,              // ray min range
              pushC.lightPosition.xyz, // ray direction
              tMax,              // ray max range
              0                  // payload (location = 0)
      );
      if(prd.world_position.w < 0) // miss, no obstacle
      {
        vec3 H = normalize(pushC.lightPosition.xyz - direction.xyz);
        const float ndh = max(0.0, dot(H, hitNormal));
        const float hdl = max(0.0, dot(H, pushC.lightPosition));
        const float ndv = max(1e-4, -dot(direction.xyz, hitNormal));
        float D = D_GGX(ndh, alpha);
        float G = SmithGGX_G2Approx(ndv, ndl, alpha);
        vec3 F = F_Schlick(hdl, specularColor);
        vec3 Fr = min(1.0, D*G)*F;

        if(rayDepth >= pushC.firstBounce)
        {
          rayAccumLight += lightModulation * (diffuseColor / M_PI + Fr) * pushC.sunIntensity * ndl;
        }
      }
    }

    direction.xyz = L;
    lightModulation *= brdf;
  }

  // Do accumulation over time
  if(pushC.frame > 0)
  {
    float a         = 1.0f / float(pushC.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    //old_color.z = 1.0;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, rayAccumLight, a), 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rayAccumLight, 1.f));
  }
}
