#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable


#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = B_CAMERA) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
}
cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float skyIntensity;
  float sunIntensity;
  int   frame;
  int   maxBounces;
  int   firstBounce;
  float focalDistance;
  float lensRadius;
  int   renderFlags;
}
pushC;

float D_GGX(float ndh, float a) {
    float k = a / max(1e-4, (ndh * ndh)*(a*a-1) + 1);
    return k * k / M_PI;
}

// Earl Hammon's Diffuse GGX talk
// Predivided by 4*ndl*ndv
float SmithGGX_G2Approx(float ndv, float ndl, float a)
{
    return 0.5 / mix(2*ndl*ndv, ndl+ndv, a);
}

// Actually returns G1/(2NdV) as it cancels out some terms in the VNDF estimator
float SmithGGXG1(float ndv, float alpha)
{
	float a2 = alpha*alpha;
	float num = 2*ndv;
	float den = ndv + sqrt(a2 + (1-a2)*ndv*ndv);
	return num / max(den,1e-6);
}

float SmithGGX_G2_over_G1(float ndv, float ndl, float alpha)
{
	float a2 = alpha*alpha;
	float den = ndv + sqrt(a2+(1-a2)*ndv*ndv);
	return den * 0.5 / mix(2*ndl*ndv, ndl+ndv, alpha);
}

vec3 F_Schlick(float hdl, vec3 f0) {
    float p = (1-hdl);
    float p2 = p*p;
    float p5 = p*p2*p2;
    return f0 + (1.0 - f0) * p5;
}

bool traceRecursiveRay(vec3 ro, vec3 rd, inout uint seed)
{
  	uint  rayFlags = gl_RayFlagsOpaqueEXT;

  	float tMin     = 0.0;
  	float tMax     = 10000.0;
	bool occluded = false;
	while(!occluded)
	{
		traceRayEXT(topLevelAS, // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                ro,            	// ray origin
                tMin,           // ray min range
                rd,         	// ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
    	);
    	if(prd.world_position.w < 0 || prd.world_position.w >= tMax)
    		return false;
    	if(prd.baseColor.a == 1.0 || prd.baseColor.a > rnd(seed))
    		return true;

    	ro = prd.world_position.xyz;
    	tMax -= prd.world_position.w;
	}
}

vec3 sunContrib(
	inout uint seed,
	in vec3 origin, in vec3 hitNormal, in vec3 eye,
 	in float alpha, in vec3 specularColor, in vec3 diffuseColor)
{
	vec3 sunDir = sampleConeDirection(seed, pushC.lightPosition, 0.0046);
    float ndl = dot(sunDir, hitNormal);
    if(ndl > 0)
    {
      	if(!traceRecursiveRay(origin.xyz, sunDir, seed)) // miss, no obstacle
      	{
        	vec3 H = normalize(sunDir + eye);
	        const float ndh = max(0.0, dot(H, hitNormal));
	        const float hdl = max(0.0, dot(H, sunDir));
	        const float ndv = max(1e-4, dot(hitNormal, eye));
	        float D = D_GGX(ndh, alpha);
	        float G = SmithGGX_G2Approx(ndv, ndl, alpha);
	        vec3 F = F_Schlick(hdl, specularColor);
	        vec3 Fr = min(1.0, D*G)*F;
	        
	    	if((pushC.renderFlags & FLAG_DIFFUSE_ONLY) > 0)
	    		Fr *= 0;
	    	vec3 diffContrib = diffuseColor / M_PI;

	    	if((pushC.renderFlags & FLAG_SPECULAR_ONLY) > 0)
	    		diffContrib *= 0;
	      	return (diffContrib + Fr) * pushC.sunIntensity * ndl;
        }
    }
    return vec3(0);
}

// Derived from:
// http://jcgt.org/published/0007/04/01/
// Sampling the GGX Distribution of Visible Normals
// Eric Heitz, 2018
vec3 sampleGGXVNDF(inout uint seed, vec3 Ve, float alpha_x, float alpha_y)
{
	float U1 = rnd(seed);
	float U2 = rnd(seed);

	// Transform view direction into hemisphere configuration
	vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));

	// Section 4.1: orthonormal basis (with special case if cross product is zero)
	float lensq = Vh.x * Vh.x + Vh.y * Vh.y;
	vec3 T1 = lensq > 0 ? vec3(-Vh.y, Vh.x, 0) * inversesqrt(lensq) : vec3(1,0,0);
	vec3 T2 = cross(Vh, T1);

	// Section 4.2: parameterization of the projected area
	float r = sqrt(U1);
	float phi = 2.0 * M_PI * U2;
	float t1 = r * cos(phi);
	float t2 = r * sin(phi);
	float s = 0.5 * (1.0 + Vh.z);
	t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;

	// Section 4.3: reprojection onto hemisphere
	vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0, 1.0 - t1*t1 - t2*t2))*Vh;

	// Transforming the normal back to the ellipsoid configuration
	vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0, Nh.z)));
	return Ne;
}

void main()
{
  // Initialize the random number
  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

  //const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);//vec2(rnd(seed), rnd(seed));
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(rnd(seed), rnd(seed));
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

  if((pushC.renderFlags & FLAG_DOF) > 0)
  {
  	vec4 viewSpaceLensSample = vec4(sampleDisk(seed, pushC.lensRadius) * vec2(1.0, float(gl_LaunchSizeEXT.x)/gl_LaunchSizeEXT.y), 0, 1);
  	origin = cam.viewInverse * viewSpaceLensSample;

  	direction = cam.viewInverse * vec4(normalize(target.xyz*pushC.focalDistance-viewSpaceLensSample.xyz), 0);
  }

  //origin.x += 2.0/60 * rnd(seed); // Motion blur

  vec3 lightModulation = vec3(1);
  vec3 rayAccumLight = vec3(0);

  for(int rayDepth = 0; rayDepth <= pushC.maxBounces; rayDepth++)
  {
  	traceRecursiveRay(origin.xyz, direction.xyz, seed);

    if((rayDepth >= pushC.firstBounce || rayDepth == 0)
      && prd.world_position.w < 0) // Always show the background
    {
    	vec3 skyColor = mix(pushC.clearColor.xyz, vec3(1.0), max(0, min(1, direction.y))) * pushC.skyIntensity;

		if((pushC.renderFlags & FLAG_GREY_FURNACE) > 0)
		{
			skyColor = vec3(0.7);
		}
      	rayAccumLight += lightModulation * skyColor;
    }
    if(prd.world_position.w < 0) // miss
    {
      	break;
    }

	rayAccumLight += lightModulation * prd.emittance; // Emissive light from the model
    // new ray config for next frame
    vec3 hitNormal = prd.world_normal;
    origin.xyz = prd.world_position.xyz;
    vec3 L;
    float alpha = prd.roughness * prd.roughness;

    // Reconstruct PBR material
    vec3 specularColor = mix(vec3(0.04), prd.baseColor.xyz, prd.metallic);
    vec3 diffuseColor = prd.baseColor.xyz * (1.0-prd.metallic);

    // 50% probability for each path. TODO: Support alpha
    vec3 brdf = vec3(1.0);
    vec3 tangent, bitangent;
    createCoordinateSystem(hitNormal, tangent, bitangent);
    
    if((seed & 1) > 0) // Diffuse.
    {
      	if(rayDepth == 0 && (pushC.renderFlags & FLAG_SPECULAR_ONLY) > 0)
       		break; // Ignore diffuse path

		L = samplingCosHemisphere(seed, tangent, bitangent, hitNormal);
		const float ndl = max(0.0, dot(L, hitNormal));
		// 2 factor to compensate for 50% probability of hitting this light path
		brdf = 2.0 * diffuseColor / M_PI;
    }
    else // Specular
    {
        if(rayDepth == 0 && (pushC.renderFlags & FLAG_DIFFUSE_ONLY) > 0)
            break; // Ignore specular path

        // Scatter ray direction using the distribution of visible normals
        // Move view vector to tangent space
		mat3 worldFromTangent = mat3(tangent, bitangent, hitNormal);
		vec3 tsEye = -direction.xyz * worldFromTangent;
        const vec3 tsH = sampleGGXVNDF(seed, tsEye, alpha, alpha);

        float ndl = -1;
        vec3 H = tangent*tsH.x + bitangent*tsH.y + hitNormal*tsH.z;
        L = reflect(direction.xyz, H);
        
        ndl = dot(L, hitNormal);

        if(ndl > 0)
        {
            const float hdl = max(0.0, dot(H, L));
            float ndv = max(1e-6, -dot(hitNormal, direction.xyz));
            
            alpha = 1.0;
            float G = SmithGGXG1(ndl, alpha);
            vec3 F = F_Schlick(hdl, specularColor);
            vec3 Fr = G*F;

            // 2 factor to compensate for 50% probability of hitting this light path
            brdf = 2*Fr;
        }
        else
        {
        	rayDepth = pushC.maxBounces+1; // Should really do multiple scattering here.
        }
    }

    // Explicitly sample sun light
    if(rayDepth >= pushC.firstBounce && rayDepth < pushC.maxBounces)
    {
    	rayAccumLight += lightModulation * sunContrib(
    		seed,
    		origin.xyz, hitNormal, -direction.xyz,
    		alpha, specularColor, diffuseColor);
    }

	direction.xyz = L;
	lightModulation *= brdf;
  }

  // Do accumulation over time
  if(pushC.frame > 0)
  {
    float a         = 1.0f / float(pushC.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    //old_color.z = 1.0;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, rayAccumLight, a), 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rayAccumLight, 1.f));
  }
}
