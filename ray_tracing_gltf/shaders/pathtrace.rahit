#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "binding.glsl"
#include "gltf.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

hitAttributeEXT vec2 attribs;

// clang-format off
layout(location = 0) rayPayloadInEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

layout(set = 0, binding = 0 ) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 2) readonly buffer _InstanceInfo {PrimMeshInfo primInfo[];};

layout(set = 1, binding = B_INDICES) readonly buffer _Indices {uint indices[];};
layout(set = 1, binding = B_TEXCOORDS) readonly buffer _TexCoordBuf {float texcoord0[];};
layout(set = 1, binding = B_MATERIALS) readonly buffer _MaterialBuffer {GltfMaterial materials[];};
layout(set = 1, binding = B_TEXTURES) uniform sampler2D texturesMap[]; // all textures

// clang-format on

layout(push_constant) uniform Constants
{
    vec4  clearColor;
    vec3  lightPosition;
    float skyIntensity;
    float sunIntensity;
    int   frame;
    int   maxBounces;
    int   firstBounce;
    float focalDistance;
    float lensRadius;
    int   renderFlags;
}
pushC;

vec2 getTexCoord(uint index)
{
    vec2 vp;
    vp.x = texcoord0[2 * index + 0];
    vp.y = texcoord0[2 * index + 1];
    return vp;
}

void main()
{
    // Retrieve the Primitive mesh buffer information
    PrimMeshInfo pinfo = primInfo[gl_InstanceCustomIndexEXT];
    int matIndex       = pinfo.materialIndex;  // material of primitive mesh
    if(matIndex  < 0)
        return; // Accept intersection. Default material is opaque.

    GltfMaterial mat = materials[nonuniformEXT(matIndex)];
    bool opaque = mat.alphaMode == 0
    || ((mat.pbrBaseColorTexture < 0) && (mat.pbrBaseColorFactor.a == 1));
    if(opaque) return;

    // Sample alpha from material
    // Getting the 'first index' for this mesh (offset of the mesh + offset of the triangle)
    uint indexOffset  = pinfo.indexOffset + (3 * gl_PrimitiveID);
    uint vertexOffset = pinfo.vertexOffset;           // Vertex offset as defined in glTF

    // Getting the 3 indices of the triangle (local)
    ivec3 triangleIndex = ivec3(indices[nonuniformEXT(indexOffset + 0)],  //
                                indices[nonuniformEXT(indexOffset + 1)],  //
                                indices[nonuniformEXT(indexOffset + 2)]);
    triangleIndex += ivec3(vertexOffset);  // (global)

    const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

    // TexCoord
    const vec2 uv0       = getTexCoord(triangleIndex.x);
    const vec2 uv1       = getTexCoord(triangleIndex.y);
    const vec2 uv2       = getTexCoord(triangleIndex.z);
    const vec2 texcoord0 = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

    uint txtId = mat.pbrBaseColorTexture;
    float alpha = texture(texturesMap[nonuniformEXT(txtId)], texcoord0).a;
    alpha *= mat.pbrBaseColorFactor.a;

    if(mat.alphaMode == 1) // Cutoff
    {
        alpha = alpha > mat.alphaCutoff ? 1 : 0;
    }
    // TODO: Properly handle blend modes
    if(rnd(prd.seed) > alpha) // Pass through
        ignoreIntersectionEXT();
}
